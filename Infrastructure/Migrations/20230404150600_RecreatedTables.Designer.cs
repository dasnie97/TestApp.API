// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(TestWatchContext))]
    [Migration("20230404150600_RecreatedTables")]
    partial class RecreatedTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.TestReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Failure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FixtureSocket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFalseCall")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstPass")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessStep")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDateTimeStarted")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("TestingTime")
                        .HasColumnType("time");

                    b.Property<string>("WorkstationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("WorkstationName");

                    b.ToTable("TestReports", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Workstation", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Customer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("OperatorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionX")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RecordUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("Workstations", (string)null);
                });

            modelBuilder.Entity("Domain.Models.TestReport", b =>
                {
                    b.HasOne("Domain.Models.Workstation", "Workstation")
                        .WithMany()
                        .HasForeignKey("WorkstationName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workstation");
                });
#pragma warning restore 612, 618
        }
    }
}
